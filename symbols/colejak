// Use these as references for the syntax

// /usr/share/X11/xkb - root directory
// /usr/share/X11/xkb/keycodes/evdev - see how <AE01> is parsed
// /usr/share/X11/xkb/symbols/* - meat and potatoes of remapping keys

default partial alphanumeric_keys modifier_keys
xkb_symbols "default" {

    name[Group1]= "Colejak";
    
    // Things like type[Group1], symbols[Group1] are for namespacing the keys. 
    // This prevents situations where you change
    // keyboard layouts temporarily then when you switch back, some keys are
    // retained from the secondary layout.
    // Its especially important when you inherit a base layout like
    // us(basic).

    // Globally sets all keys
    key.type[Group1] = "EIGHT_LEVEL";

    // cant use NoSymbol to noop original Esc
    key <ESC> { [ Print ] };

    key <LCTL> { [ NoSymbol ] };
    key <TLDE> {	[ NoSymbol  ] };
    key <AE01> {	[ NoSymbol  ] };
    // setting the type prevents situations where the shift layer behavior
    // of the original key is retained.
    key <AE02> {	type[Group1] = "ONE_LEVEL", [ Home ]	};
    key <AE03> {	type[Group1] = "ONE_LEVEL", [ Return ]	};
    key <AE04> {	type[Group1] = "ONE_LEVEL", [ End]	};
    key <AE05> {	type[Group1] = "ONE_LEVEL", [ Delete ]	};  
    key <AE06> {	[ NoSymbol ]	};
    key <AE07> {	[ NoSymbol ]	};
    key <AE08> {	type[Group1] = "ONE_LEVEL", [ Left ]	};
    key <AE09> {	type[Group1] = "ONE_LEVEL", [ Down ]	};
    key <AE10> {	type[Group1] = "ONE_LEVEL", [ Up ]	};
    key <AE11> {	type[Group1] = "ONE_LEVEL", [ Right ]	};
    key <AE12> {	[     minus,	underscore	]	};
    key <BKSP> {	[     equal,	plus		]	};


    // Level3 modifier mappings get overidden by some apps
    include "level5(modifier_mapping)"

    // Map numbers on layer 6 as well (Shift+Lvl5_Shift)
    // to make them work with keybinds such as `Mod4+Mod5+Number`
    key <AD01> {	[	  q,	Q       ]   };
    key <AD02> {	[	  w,	W ]	};
    key <AD03> {	[	  f,	F ]	};
    key <AD04> {	[	  p,	P ]	};
    key <AD05> {	[	  b,	B ]	};
    key <AD06> {	[ NoSymbol ]	};
    key <AD07> {	[	  k,	K, NoSymbol, NoSymbol, NoSymbol, NoSymbol ]	};
    key <AD08> {	[	  l,	L, NoSymbol, NoSymbol, 8, 8       ]	};
    key <AD09> {	[	  u,	U, NoSymbol, NoSymbol, 7, 7		]	};
    key <AD10> {	[	  y,	Y, NoSymbol, NoSymbol, 6, 6		] 	};
    key <AD11> {	[	  j,	J, NoSymbol, NoSymbol, 5, 5		] 	};
    key <AD12> {	[ Escape ]	};
    key <BKSL> { [ bracketright, greater ]};

    key <AC01> {	[	  a,	A ] };
    key <AC02> {	[	  r,	R ]	};
    key <AC03> {	[	  s,	S ]	};
    key <AC04> {	[	  t,	T ]	};
    key <AC05> {	[	  g,    G ]	};
    key <AC06> {    [ NoSymbol ] };
    key <AC07> {	[	  h,	H ]	};
    key <AC08> {	[	  n,	N, NoSymbol, NoSymbol, 1, 1]	};
    key <AC09> {	[	  e,	E, NoSymbol, NoSymbol, 2, 2]	};
    key <AC10> {	[	  i,	I, NoSymbol, NoSymbol, 3, 3]	};
    key <AC11> {	[	  o,	O, NoSymbol, NoSymbol, 4, 4]	};
    key <RTRN> { 
        type[Group1] = "ONE_LEVEL", 
        symbols[Group1] = [ Shift_R ],
        actions[Group1] = [ SetMods(modifiers=Shift) ] // for Lock behavior, use LockMods
    };

    key <AB01> {	[	  z,	Z ]	};
    key <AB02> {	[	  x,	X ]   };
    key <AB03> {	[	  v,	V		]	};
    key <AB04> {    [     c,    C, NoSymbol, NoSymbol, 9,	9	 ] };
    key <AB05> {	[	  d,    D ]	};
    key <AB06> {	[     m,    M ]	};
    key <AB07> {	[	  space,    NoSymbol, NoSymbol, NoSymbol, 0, 0 ] };
    key <AB08> { type[Group1]="ONE_LEVEL", [     BackSpace ]	};
    key <AB09> { type[Group1]="TWO_LEVEL",  [ dead_tilde, question ]	};
    key <AB10> { type[Group1]="TWO_LEVEL", [ dead_grave, slash ] };
    key <RTSH> { type[Group1] = "ONE_LEVEL", [ Super_R ] };

    key <SPCE> { 
        type[Group1]="ONE_LEVEL",
        symbols[Group1] = [ Control_L ],
        actions[Group1] = [ SetMods(modifiers=Control) ]
    };

    key <CAPS> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ Shift_L ],
        actions[Group1] = [ SetMods(modifiers=Shift) ]
    };

    key <LFSH> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
};
